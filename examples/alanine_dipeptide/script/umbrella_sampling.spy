#!/home/xqding/apps/miniconda3/bin/python

# Created by Xinqiang Ding (xqding@umich.edu)
# at 2019/10/05 01:27:20

#SBATCH --job-name=sampling
#SBATCH --time=05:00:00
#SBATCH --partition=sixteencore
#SBATCH --cpus-per-task=2
#SBATCH --array=0-624
#SBATCH --output=./slurm_output/sampling_%a.log
#SBATCH --open-mode=truncate

import simtk.openmm.app  as omm_app
import simtk.openmm as omm
import simtk.unit as unit
import math
import os
import numpy as np
from sys import exit

## equilibrium theta in torsion biasing potential
M = 25
theta1 = np.linspace(-math.pi, math.pi, M, endpoint = False)
theta2 = np.linspace(-math.pi, math.pi, M, endpoint = False)

job_index = int(os.environ['SLURM_ARRAY_TASK_ID'])
theta1_index = job_index // M
theta2_index = job_index % M

## read system
with open("./structure/system_with_bias.xml", 'r') as file_handle:
    xml = file_handle.read()    
system = omm.XmlSerializer.deserialize(xml)

## setup context
platform = omm.Platform.getPlatformByName('Reference')
T = 298.15 * unit.kelvin
fricCoef = 10/unit.picoseconds
stepsize = 1 * unit.femtoseconds
integrator = omm.LangevinIntegrator(T, fricCoef, stepsize)

context = omm.Context(system, integrator, platform)
pdb = omm_app.PDBFile("./structure/alanine_dipeptide.pdb")
context.setPositions(pdb.positions)

## set equilibrium theta for biasing potential
context.setParameter("theta1", theta1[theta1_index])
context.setParameter("theta2", theta2[theta2_index])

## minimize
state = context.getState(getEnergy = True)
energy = state.getPotentialEnergy()
print(energy)

omm.LocalEnergyMinimizer_minimize(context, 0.01)
state = context.getState(getEnergy = True)
energy = state.getPotentialEnergy()
print(energy)

## initial equilibrium
integrator.step(5000)

topology = omm.app.AmberPrmtopFile("./structure/alanine_dipeptide.prmtop").topology
os.makedirs(f"./output/umbrella_sampling/traj", exist_ok = True)

file_handle = open(f"./output/umbrella_sampling/traj/traj_{job_index}.dcd", 'bw')
dcd_file = omm_app.dcdfile.DCDFile(file_handle, topology, dt = stepsize)
for i in range(5000):
    if (i + 1) % 10 == 0:
        print(i, flush = True)
    integrator.step(1000)
    state = context.getState(getPositions = True)
    positions = state.getPositions()
    dcd_file.writeModel(positions)
    
file_handle.close()    

